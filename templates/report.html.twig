{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Här finner du mina redovisnigstexter för varje kursmoment.</h1>

    <ul class="list">
        <li><a href="#kmom01">kmom01</a></li>
        <li><a href="#kmom02">kmom02</a></li>
        <li><a href="#kmom03">kmom03</a></li>
        <li><a href="#kmom04">kmom04</a></li>
        <li><a href="#kmom05">kmom05</a></li>
        <li><a href="#kmom06">kmom06</a></li>
        <li><a href="#kmom10">kmom10</a></li>
    </ul>
    
    <h2 id="kmom01">kmom01</h2>

    <p>Nu startar kmom01! Jag har sedan tidigare endast erfarenhet av att nyligen gå en kurs i objekt orienterad python så det kommer bli kul att fortsätta koda objektorienterat i denna kursen.</p>
    <p>Några grunder som man behöver för att komma igång med objektorienterad php är att till att börja med så skall man veta hur man skapar en klass i php. Av klasser skapas objekt som skall/kan initieras men värden, klasser innehåller metoder som kan liknas vid funktioner som kan anvädas av objektet. Sedan så behöver man veta hur man importerar klasserna och skapar objekt.</p>
    <p>Kodstrukturen som jag har använt mig utav i symfony tycker jag liknar mycket strukturen som vi använde oss utav i express när vi gick databas kursen nyligen. Även flask tycker jag har väldigt lik struktur, även det något som vi nyligen har lärt oss. Så det känns bra att det är något som finns färskt i minnet som jag kommer ha användning utav och kunna utveckla mer!</p>
    <p>Artikeln “PHP The Right Way” tycker jag verkar vara en väldigt bra handbok för php som har med det mesta som är viktigt för att man skall börja koda. Några delar som hade varit kul att veta mer om hade varit delen "security" då det är en viktigt del av nätet idag.</p>
    <p>TIL för detta kmom är att starta en sida med symfony-ramverk</p>

    <h2 id="kmom02">kmom02</h2>
    <p>Nytt kmom! I detta kmom så har vi börjat jobba med klasser. För lite snabb förklaring av objektorienterade konstruktioner. Med arv så menas det att en klass kan ärva publica och "protected" konstruktioner ifrån en annan klass. Komposition innebär att en klass har en väldigt stark koppling till en annan klass, en av klass är beroende av att den andra klassen existerar. Om en klass implementerar ett interface så behöver den klassen innehålla ett visst antal metoder ifrån detta interfacet. Med hjälp av traits så kan klasser använda sig utav metoderna som finns i traits.</p>
    <p>Jag löste uppgifter genom att först börja med att implementera alla klasser(Card) som ligger i mappen Card. Därefter så skapade jag routesen i CardControllerRoutes efter varje ny route jag skapade så fick jag anpassa mina klasser så att dom gick att använda i routesen. Template filerna la jag till i skapandet av routsen, dessa filer la jag i templates/card. Därefter så fortsatte jag att skapa mina routes för jsonapi, för dessa routes så skapade jag en ny fil(CardControllerJson). Här fick jag också modifiera metoderna i klasserna så att det skulle skriva ut jsonapi. Jag är änsålänge nöjd med min implementation av klasser och routes, tycker det finns en bra ordning i dem. Det finns förstås mycket som säkert hade kunnat förbättras, en sak som hade kunnat förbättras är bl.a. hur korten skrivs ut. Här valde jag att göra det simpelt med utf-8 tecken.</p>
    <p>Mina reflektioner så långt in i kursen är att det är en rolig kurs som liknar mycket tidigare kurser som vi nyligen har avslutat, både Flask i oopython kursen och express i databas kursen är ganska lika symfoni. Kul att koda objektorienterat i ett annat språk! Vill även försöka bli bättre på commita till mitt repo så det kommer bli bra träning.</p>
    <p>TIL för detta kmom är objektorienterad php!</p>
    <h2 id="kmom03">kmom03</h2>

    <h2 id="kmom04">kmom04</h2>

    <h2 id="kmom05">kmom05</h2>

    <h2 id="kmom06">kmom06</h2>

    <h2 id="kmom10">kmom10</h2>
{% endblock %}